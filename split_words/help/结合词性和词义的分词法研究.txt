设计一种可以对分过的词进行二次分词的算法，目的是将一部分词合并为一个新词

案例:  时间、数量、专有名词、否定词
    2015/m年/m12/m月/m
    1.76/m亿元
    西南/ns证券/n股份/n有限公司/n
    中国/ns人寿/n福建省/ns分公司/n电销/n中心/n
    夸大/v红双喜/nr盈/vg宝顺/nr两全/n保险/n分红/v型/k收益/n
    不予/v采纳/v
    未/d按规定/l披露/v签订/v

判断规则:
    词义
        一般形式  # 写法例: 披露/  # 特点“中文”
        英文      # 写法例: -abc/、-ABC/  # 特点“-英文”
        词义正则  # 写法例: -^不.+-{2,}/  # 匹配两个以上的不字开头的词，特点“-正则-”
    词性  # 默认为精确匹配词性
        精确匹配  # 写法例: v/、vd/  # 特点“词性”
        模糊匹配  # 写法例: _v/、_ns/  # 前面加下划线，用于处理一类、二类、三类词性问题，特点“_词性的开头几个字母”
        词性正则  # 写法例: _^v?n_{2,}/  # 匹配两个以上的名词或动名词，特点“_正则_”
    词义+词性
        并集匹配  # 写法例: -不?是-&&_vn?_/  # 匹配词义符合"-不?是-"或词性符合"_vn?_"的内容
        交集匹配  # 写法例: -不?是-||_vn?_/  # 匹配词义符合"-不?是-"且词性符合"_vn?_"的内容
    匹配出的词的词性
        系统词性  # 写法例: n+ n  # 将n+匹配到的词设置词性为n
        自定义    # 写法例: n+ myn  # 将n+匹配到的词设置词性为myn
        自动词性  # 写法例: n+/-^不.+-{2,} auto  # 将n+匹配到的词设置词性为匹配到的最后一个词的词性
		前缀词性  # 写法例：n+ sc@n、 n+ sc@auto  # 使用@符分隔前面是词性前缀，后面是词性，允许设置auto
			+ n+ sc@auto  # 其中sc@auto匹配出的结果为sc@n
			+ sc@n dj@auto  # 匹配出的结果为dj@sc@n
			+ 设置词性前缀可以方便后面提取词，且依然能识别出原词词性
        默认词性  # 配置在RuleBase()及其子类的default_tag上，可以在规则未指定词性时控制词性，默认值为'x'

实现功能:
    + 规则标签(m/年/m/月/m/日 mm)  # 允许为规则标注词频和词性，空格隔开，保证顺序，允许为空
    + 符号断句  # 根据符号将文章分为不同的字句，再在子句中处理 (未实现)（已实现结束符短句）
    + 词义识别  # 识别当前词的词义
        + 一般词义(你/看看)
        + 正则词义("中*?国"/) (未实现,待商定是否有必要)（已实现）
    + 词性识别(r/v/)  # 识别当前词的词性
    + 特殊符号功能
        + 通配符(.)  # 可以匹配任意字符.
        + 扩充匹配(+)  # 可以匹配多个
        + 任意数量匹配(*)  # 可以匹配任意个
        + 数字(\d)  # 可以匹配数字
        + 字符个数({8})  # 匹配8个字符
        + 字符范围({0,8})  # 匹配0到8个字符
        + 非贪婪匹配(?)  # 默认是贪婪匹配，尽可能多匹配，加上该值后将变成尽可能少匹配
    + 转义字符  # 可以将特殊字符转义成普通字符处理（暂时不实现）（已实现）


词典格式:
规则 词频 词性
随风飘扬/p/天上 5 x
注: 词频和词词性可以省略,尽量避免在规则中使用空格,严格避免在规则中使用空格和小写字母的组合词

处理流程
    + 轮训规则字符串，处理转义字符（暂时不实现）
    + 将所有规则按'/'分割，制成规则集，初始化完成
    + 传入分词后的对象POSWords(或者该方法作为POSWords的一个功能项加载进去)，
      轮训word,与规则集逐个匹配，
    + 匹配的上的结果进一步匹配规则的后续内容，
    + 完全匹配成功的将沿途各词合为一词
        + 算法逻辑，例：'中华人民共和国/ns/国旗/n/随风飘扬/i/在/p/天上/s'
        + 规则: ['中华人民共和国/n', '中华人民共和国/n/i', '随风飘扬/p/天上']
            + 使用最宽匹配的原则
                + '中华人民共和国国旗随风飘扬/x/在/p/天上/s'
                + 匹配到最长的结果，在从结束位置继续往后匹配
                + 优点，与目前采用的分词算法分出的结果接近
                + 缺点，效率低，需要对每次找到的所有词都经行匹配
            + 使用先到先得的原则  (最终决定采用此方法)
                + '中华人民共和国国旗/x/随风飘扬在天上/x'
                + 由于前一个规则优先匹配到了，后面的规则不在就此匹配，字符串继续往下走
                + 优点，效率高；
                + 缺点，规则有优先级，因此配置时需要考虑优先级
            + 最全原则
                + ['中华人民共和国国旗', '中华人民共和国国旗随风飘扬', '随风飘扬在天上']
