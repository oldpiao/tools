2 成功，不退出
1 成功
0 失败，不退出
-1 失败退出

贪心算法/非贪心算法
循环判断: 当前规则匹配当前字符
    + 退出条件
        + 循环开始时判断的条件
            + 规则用完，匹配成功，返回当前已匹配的词
            + 词用完
                + 之后的规则全都已匹配到足够的词，返回当前已匹配的词(*、?之类的0个就已经够了)
                + 否则
                    + 当前规则或当前规则前面的规则可以借位，规则序号+1并带入借位算法
                        + 继续循环判断
                    + 否则匹配失败，返回None
        + 借位算法中判断
            + 当前规则前无规则，匹配失败，返回None
    + 规则后缀
        + Null
            + 成功 1
            + 失败 -1
        + ?
            + 成功 1
            + 失败 0
        + +
            + 成功 2
            + 首次就失败 -1
            + 再次失败 0
        + *
            + 成功 2
            + 失败 0
        + {n}
            + 成功 2
            + 成功n次 0
            + 失败 -1
        + {m,n}
            + 成功次数少于m次成功 2
            + 成功次数大于m次成功 2
            + 成功次数等于n次 0  （大于n时也返回了0，但实际不会出现该情况，出现时应该去除多出部分才对）
            + 成功次数少于m次时失败 -1
            + 成功次数多于m次少于n次时失败 0
        + {m,}
            + 成功次数少于m次成功 2
            + 成功次数大于m次成功 2
            + 成功次数少于m次时失败 -1
            + 成功次数多于m次时失败 0
        + +?
            + 成功 3
            + 首次就失败 -1
            + 再次失败 0
        + *?
            + 首次不判断直接返回 -2
            + 成功 3
            + 失败 0
        + {n}? (此时的?毫无作用)
            + 成功 2
            + 成功n次 0
            + 失败 -1
        + {m,n}?
            + 成功次数少于m次成功 2
            + 成功次数大于m次成功 3
            + 成功次数等于n次 0  （大于n时也返回了0，但实际不会出现该情况，出现时应该去除多出部分才对）
            + 成功次数少于m次时失败 -1
            + 成功次数多于m次少于n次时失败 0
        + {m,}?
            + 成功次数少于m次成功 2
            + 成功次数大于m次成功 3
            + 成功次数少于m次时失败 -1
            + 成功次数多于m次时失败 0

    + 对应操作
        + 3 匹配成功，规则向后移动一位，words向后移动一位  （非贪心算法）
        + 2 匹配成功，继续用该规则匹配，words向后移动一位  （贪心算法）
        + 1 匹配成功，规则向后移动一位，words向后移动一位
        + 0 匹配失败，规则向后移动一位，words不移动
        + -2 未做匹配，规则向后移动一位，words不移动  （用于非贪心算法中的+）
        + -1 匹配失败，
            1. 将规则匹配的内容清除
                + words向前移动n位，n为该规则在此之前匹配的词的个数
            2. 使用借位算法: 查看上一个规则是否可以借位或向后匹配
                + -1 上一个规则可以向后匹配  （-2,3 非贪心算法）
                    + 规则向前移动一位，words向前移动一位
                    + 重复判断
                + -2 上一个规则可以借位  （2 贪心算法）
                    + 上一个规则的匹配结果减少一个，words向前移动一位
                    + 重复判断
                + n 上一个规则不可以借位  （n为上一个规则匹配到的字符数）
                    + 规则向前移动一位，words向前移动n位，
                    + 重复-1下的操作（查看再上一个规则是否可以借位）
