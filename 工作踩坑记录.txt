向领导汇报：
	+ 注意说明白项目背景和介绍
		+ 数据来源，做了哪些工作：一方面说明工作量，另一方面让领导判断可靠性
		+ 背景：项目背景，如果都知道的话，就说一下针对当前节点，专门做了哪些方面的工作，为了什么
			+ 如项目比较赶的时候针对测试数据专门优化了，要和领导说清楚
		+ 介绍：说清楚要围绕哪几点汇报，有时要说的内容较多需要提前说明一下。

做项目：
	+ 要明确需求适用范围：有些功能在需求适用范围不同时实现方式也不同，要求的精度与召回不同，需要投入的人力也不同，需要在明确范围的情况下才可以决定如何做
		+ 不明确的需求会导致投入过多的人力物力，或将需求考虑的过于简单，从而达不到效果
		+ 在确实无法明确需求的情况下，应该尽可能简单的实现
		+ 如明确知道需求后续会扩展的话，应尽量做到可扩展，方便后续新需求的添加，但无需考虑过多扩展，应在保证当前功能的情况下，有限扩展
			+ 因为可能新的需求根本无法使用当前思路完成，需要从头修改，要保证当前方案可以成为新方案的一个模块即可，此时做了过多的扩展只是无用功
日常工作：
	+ 建议自己无论不是特别忙的情况下每天留出1小时时间专门做文字类工作
		+ 写wiki
		+ 工作总结
		+ 整理代码注释、说明、help等
		+ 做分享PPT
		+ 好处：这些工作如果集中时间再做很多东西都忘记了，且容易想不起来有什么要做的
		
		
定量思想替换定性思想：
	+ 模型、数据类的工作更多需要定量的指标，这样才可以控制风险，如果还是只是从程序的角度定性的考察模型效果，大概的估计效果是不行的
	
	
	
公司项目问题记录
	+ 项目模块化较差
	+ 方法拆分不细致
	+ 服务和功能大量耦合
	+ 配置不规范
	+ 数据与功能未拆分
	+ 版本管理较差
		+ 同一套代码在不同项目上存在差异，却总是通过打补丁的方式实现，导致代码中同一个方法功能不同
			+ 应该将功能尽量拆分细致一些，这样在之后的项目中又定制化的地方，可以基于基础版本创建子类，增加功能，而非直接修改原始代码
	+ 功能复用较差
	+ 代码迁移性较差
	+ 日志管理不成体系
	+ 测试用例不足（也可能是我没找到）

公司项目中学到的新技巧
	+ 动态绝对路径使用
	+ 工作
	
	
	
项目搭建技巧总结
	+ py文件与包切换，__init__.py的巧妙应用
	+ 项目结构
		+ 项目用的自研第三方库/  # 重点
		+ 项目目录/  # 重点
			+ utils.py  or utils/
			+ 项目主体/
			+ 项目辅助模块
			+ setting.py
		+ help/
		+ test/
		+ readme
		+ requirements.txt
	+ 项目的多层配置
	+ 项目的多层日志管理

项目经验总结
	+ 不要在功能中间穿插功能，尽量封装在模块外，或模块功能前、功能后，并尽量在之类中继承实现，避免影响原本的模块结构